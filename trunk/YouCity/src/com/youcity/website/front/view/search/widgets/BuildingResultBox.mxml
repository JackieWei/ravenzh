<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:components="com.youcity.website.front.view.components.*" 
	xmlns:widgets="com.youcity.website.front.view.search.widgets.*"
	width="100%" height="100%" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:controls="com.youcity.website.front.view.components.controls.*">
	<mx:Script>
		<![CDATA[
			import com.youcity.website.front.view.marker.SearchMarkerManager;
			import com.youcity.website.front.event.SearchEvent;
			import com.youcity.website.front.view.common.CallbackData;
			import com.youcity.website.front.common.Constants;
			import com.youcity.website.front.view.components.PaginationEvent;
			import com.youcity.website.front.vo.ResultVO;
			import mx.rpc.events.ResultEvent;
			import com.youcity.website.front.model.SearchModelLocator;
			
			private static const HINT_NO_RESULT:String  = "No Result";
			
			private var searchModel:SearchModelLocator = SearchModelLocator.getInstance();
			
			private var sMarker:SearchMarkerManager = SearchMarkerManager.getInstance();
			
			private var dataChanged:Boolean = false;
		
			private var _buildingResult:ResultVO;
			public function get buildingResult():ResultVO
			{
				return this._buildingResult;
			}
			
			public function set buildingResult(value:ResultVO):void
			{
				if (value != _buildingResult&&  value != null)
				{
					this._buildingResult = value;
					dataChanged = true;
					invalidateDisplayList();
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if (dataChanged)
				{
					dataChanged = false;
					var length:uint = this._buildingResult.resultList.length;
					currentState = length == 0 ? "noResult" : "normal";
					buildingRP.dataProvider = this._buildingResult.resultList;
					pBox.totalNum = this._buildingResult.totalNum;
				}
			}
			
			//handler for paginationbox's changePage event
			//search the next page
			private function handlePaginationEvent(event:PaginationEvent):void
			{
				sMarker.hide();
				var param:Object = {q:searchModel.keyword,
									ps:searchModel.pageSize,
									np:event.currentPage,
									cl:Constants.SEARCHTYPE_BUILDING};
				doSearchBuilding(param);
			}
			
			//do search with parameter
			//the parameter object should contains keyword, pageSize, 
			//currentPage and searchType
			private function doSearchBuilding(param:Object):void
			{
				var e:SearchEvent = new SearchEvent(SearchEvent.SEARCH_BUILDING);
				e.callback = doSearchBuildingCallback;
				e.data = param;
				e.dispatch();
			}
			
			//callback function for doSearchBuilding
			private function doSearchBuildingCallback(callbackData:CallbackData):void
			{
				switch (callbackData.code)
				{
					case CallbackData.SUCCEED:
						this.buildingResult = searchModel.buildingResult;
						sMarker.source = this.buildingResult.resultList;
						break;
					case CallbackData.FAILED:
						break;
				}
			}
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="normal">
			<mx:SetProperty target="{pBox}" name="visible" value="true"/>
		</mx:State>
		<mx:State name="noResult">
			<mx:AddChild relativeTo="{buildingResultView}" position="firstChild">
				<mx:HBox width="100%" verticalAlign="middle" styleName="titleText" paddingTop="5" paddingBottom="10">
					<mx:SWFLoader source="assets/friend/exclamation.png"/>
					<controls:Label text="{HINT_NO_RESULT}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{pBox}" name="visible" value="false"/>
		</mx:State>
	</mx:states>
	
	<mx:Canvas id="buildingResultView" width="100%" height="{height - 40}">
		<components:GridContainer width="{width - 30}" columnCount="1">
			<mx:Repeater id="buildingRP">
				<widgets:BuildingResultItem width="100%" buildingVO="{buildingRP.currentItem}" />
			</mx:Repeater>
		</components:GridContainer>
	</mx:Canvas>
	<components:PaginationBox id="pBox" width="100%" changePage="handlePaginationEvent(event)"/>
</mx:VBox>
